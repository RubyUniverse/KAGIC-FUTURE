package mod.mike.outfitaddon.client.models;


import mod.akrivus.kagic.client.model.ModelGem;
import mod.akrivus.kagic.init.KAGIC;
import mod.mike.outfitaddon.entities.EntityDressGem;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.passive.AbstractHorse;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EnumHand;
import net.minecraft.util.EnumHandSide;
import net.minecraft.util.math.MathHelper;
    import net.minecraftforge.fml.relauncher.Side;
    import net.minecraftforge.fml.relauncher.SideOnly;

    @SideOnly(Side.CLIENT)
    public class ModelRube extends ModelGem {
    	public ModelRube() {
    		super(0.0F, 0.0F, 64, 64, false, 4.05F);
    		// Head.
    		this.bipedHead = new ModelRenderer(this, 0, 0);
    		this.bipedHead.addBox(-7.0F, -3.7F, -4.0F, 14, 12, 8);
    	    this.bipedHead.setRotationPoint(0F, 0F, 0F);
    		if (KAGIC.isHalloween() || KAGIC.isBirthday() || KAGIC.isChristmas()) {
    			this.bipedHead.addChild(this.witchHat);
    		}
    		
    	    // Body.
    	    this.bipedBody = new ModelRenderer(this, 16, 20);
    	    this.bipedBody.addBox(-4F, 8F, -2F, 8, 8, 4);
    	    this.bipedBody.setRotationPoint(0F, 0F, 0F);
    	    // Right arm.
    	    this.bipedRightArm = new ModelRenderer(this, 0, 20);
    	    this.bipedRightArm.addBox(-3F, 0F, -2F, 4, 8, 4);
    	    this.bipedRightArm.setRotationPoint(0F, 8F, 0F);
    	    // Left arm.
    	    this.bipedLeftArm = new ModelRenderer(this, 0, 32);
    	    this.bipedLeftArm.addBox(-1F, 0F, -2F, 4, 8, 4);
    	    this.bipedLeftArm.setRotationPoint(0F, 8F, 0.0F);
    	    // Right leg.
    	    this.bipedRightLeg = new ModelRenderer(this, 40, 32);
    	    this.bipedRightLeg.addBox(-4F, 4F, -2F, 4, 8, 4);
    	    this.bipedRightLeg.setRotationPoint(0F, 0F, 0F);
    	    // Left leg.
    	    this.bipedLeftLeg = new ModelRenderer(this, 40, 20);
    	    this.bipedLeftLeg.addBox(0F, 4F, -2F, 4, 8, 4);
    	    this.bipedLeftLeg.setRotationPoint(0F, 0F, 0F);
        }
    	public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
    		this.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entityIn);
    		this.bipedHead.render(scale);
    		this.bipedBody.render(scale);
    		this.bipedRightArm.render(scale);
    		this.bipedLeftArm.render(scale);
    		this.bipedRightLeg.render(scale);
    		this.bipedLeftLeg.render(scale);
    	}
    	public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, Entity entityIn) {
    	    super.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scaleFactor, entityIn);
    	}
    	public void setLivingAnimations(EntityLivingBase entitylivingbaseIn, float p_78086_2_, float p_78086_3_, float partialTickTime) {
    		this.rightArmPose = ModelBiped.ArmPose.EMPTY;
    		this.leftArmPose = ModelBiped.ArmPose.EMPTY;
    		if (entitylivingbaseIn instanceof EntityDressGem) {
    			ItemStack itemstack = entitylivingbaseIn.getHeldItem(EnumHand.MAIN_HAND);
    			EntityDressGem gem = (EntityDressGem) entitylivingbaseIn;
    			if (itemstack != null && itemstack.getItem() == Items.BOW && gem.isSwingingArms()) {
    				if (entitylivingbaseIn.getPrimaryHand() == EnumHandSide.RIGHT) {
    					this.rightArmPose = ModelBiped.ArmPose.BOW_AND_ARROW;
    				}
    				else {
    					this.leftArmPose = ModelBiped.ArmPose.BOW_AND_ARROW;
    				}
    			}
    			if (gem.getRidingEntity() instanceof AbstractHorse) {
    				this.bipedRightLeg.offsetX = 0.1F;
    				this.bipedRightLeg.offsetY = 0.33F;
    				this.bipedRightLeg.offsetZ = 0.3F;
    				this.bipedLeftLeg.offsetX = -0.1F;
    				this.bipedLeftLeg.offsetY = 0.33F;
    				this.bipedLeftLeg.offsetZ = 0.3F;
    			}
    			else {
    				this.bipedRightLeg.offsetX = 0.0F;
    				this.bipedRightLeg.offsetY = 0.0F;
    				this.bipedRightLeg.offsetZ = 0.0F;
    				this.bipedLeftLeg.offsetX = 0.0F;
    				this.bipedLeftLeg.offsetY = 0.0F;
    				this.bipedLeftLeg.offsetZ = 0.0F;
    			}
    		}
    		super.setLivingAnimations(entitylivingbaseIn, p_78086_2_, p_78086_3_, partialTickTime);
    	}
    }